"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.base64DataParse = void 0;
const pako_1 = __importDefault(require("pako"));
function base64DataParse(map, text, compression) {
    return __awaiter(this, void 0, void 0, function* () {
        const tiles = [];
        let buffer = Buffer.alloc(map.width * map.height * 4, text.trim(), 'base64');
        if (compression === 'gzip' || compression === 'zlib') {
            buffer = Buffer.from(text.trim(), 'base64');
            buffer = Buffer.from(pako_1.default.inflate(buffer));
        }
        else if (compression) {
            throw new Error(`Unsupported data compression type: ${compression}`);
        }
        const expectedCount = map.width * map.height * 4;
        if (buffer.length !== expectedCount) {
            throw new Error(`Expected ${expectedCount} bytes of tile data; received ${buffer.length}`);
        }
        for (let i = 0; i < expectedCount; i += 4) {
            const gid = buffer.readUInt32LE(i);
            if (gid > 0) {
                tiles[i / 4] = map.getTileById(gid);
            }
        }
        return tiles;
    });
}
exports.base64DataParse = base64DataParse;
//# sourceMappingURL=base64DataParser.js.map