"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = void 0;
const axios_1 = __importDefault(require("axios"));
const fast_xml_parser_1 = __importDefault(require("fast-xml-parser"));
const TiledMap_1 = require("./classes/TiledMap");
const TileSet_1 = require("./classes/TileSet");
const Image_1 = require("./classes/Image");
const Tile_1 = require("./classes/Tile");
const resolve_url_1 = __importDefault(require("resolve-url"));
const path_browserify_1 = __importDefault(require("path-browserify"));
const TileLayer_1 = require("./classes/TileLayer");
const csvDataParser_1 = require("./data-parsers/csvDataParser");
const ObjectLayer_1 = require("./classes/ObjectLayer");
const ImageLayer_1 = require("./classes/ImageLayer");
const base64DataParser_1 = require("./data-parsers/base64DataParser");
let nodePath;
try {
    nodePath = require('path');
}
catch (ex) {
}
let fs;
try {
    fs = require('fs');
}
catch (ex) {
}
class TiledParser {
    constructor() {
        this.pendingObjectsWithObjectProperty = [];
    }
    resolvePath(relativePath) {
        if (this.isUrl) {
            return resolve_url_1.default(this.rootUrlOrPath + '/', relativePath);
        }
        else {
            return (nodePath || path_browserify_1.default).join(this.rootUrlOrPath, relativePath);
        }
    }
}
const DEFAULT_OPTIONS = {
    transformObjectProperties: true,
};
function parse(filePathOrUrl, parseOptions = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const parser = new TiledParser();
        parser.options = Object.assign({}, DEFAULT_OPTIONS, parseOptions);
        parser.urlOrPath = filePathOrUrl;
        let fileContent;
        let normalizedPath;
        let rootPathOrUrl;
        if (filePathOrUrl.startsWith('http')) {
            // It's a url, let's fetch it
            fileContent = (yield axios_1.default.get(filePathOrUrl)).data;
            parser.isUrl = true;
            normalizedPath = filePathOrUrl;
            rootPathOrUrl = normalizedPath.substr(0, normalizedPath.lastIndexOf('/'));
        }
        else {
            fileContent = fs.readFileSync(filePathOrUrl).toString();
            parser.isUrl = false;
            normalizedPath = path_browserify_1.default.normalize(filePathOrUrl);
            rootPathOrUrl = normalizedPath.substr(0, normalizedPath.lastIndexOf(nodePath.sep));
        }
        const rootObj = fast_xml_parser_1.default.parse(fileContent, {
            attributeNamePrefix: '__',
            ignoreAttributes: false,
        });
        parser.rootUrlOrPath = rootPathOrUrl;
        const parsedObj = yield parseXmlObj(rootObj, parser);
        if (parsedObj.map) {
            parser.pendingObjectsWithObjectProperty.forEach((obj) => {
                obj.object[obj.key] = parsedObj.map.getObjectById(obj.object[obj.key]);
            });
        }
        // @ts-ignore
        return (parsedObj.map || parsedObj.tileSets[0]);
    });
}
exports.parse = parse;
function parseLayer(xmlObj, layer) {
    if (xmlObj.__tintcolor) {
        layer.tintColor = xmlObj.__tintcolor;
    }
    if (xmlObj.__offsetx) {
        layer.offsetX = parseInt(xmlObj.__offsetx);
    }
    if (xmlObj.__offsety) {
        layer.offsetY = parseInt(xmlObj.__offsety);
    }
    if (xmlObj.__name) {
        layer.name = xmlObj.__name;
    }
    if (xmlObj.__opacity) {
        layer.opacity = parseFloat(xmlObj.__opacity);
    }
    if (xmlObj.__visible) {
        layer.visible = xmlObj.__visible !== '0';
    }
    if (xmlObj.__parallaxx) {
        layer.parallaxX = parseInt(xmlObj.__parallaxx);
    }
    if (xmlObj.__parallaxy) {
        layer.parallaxY = parseInt(xmlObj.__parallaxy);
    }
    if (xmlObj.__locked) {
        layer.locked = (xmlObj.__locked) === '1';
    }
}
function parseXmlObj(xmlObj, parser, resultObj = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        for (const key in xmlObj) {
            if (!xmlObj.hasOwnProperty(key)) {
                continue;
            }
            const child = xmlObj[key];
            const isChildArray = Array.isArray(child);
            switch (key) {
                case 'map': {
                    const map = new TiledMap_1.TiledMap(parser.urlOrPath);
                    map.version = child.__version;
                    map.width = parseInt(child.__width);
                    map.height = parseInt(child.__height);
                    map.tileWidth = parseInt(child.__tilewidth);
                    map.tileHeight = parseInt(child.__tileheight);
                    map.orientation = child.__orientation;
                    map.renderOrder = child.__renderorder;
                    map.backgroundColor = child.__backgroundcolor;
                    resultObj[key] = map;
                    parser.map = map;
                    yield parseXmlObj(child, parser, map);
                    break;
                }
                case 'properties': {
                    const properties = resultObj[key] || {};
                    const childProperties = Array.isArray(child.property) ? child.property : [child.property];
                    childProperties.forEach((property) => {
                        switch (property.__type) {
                            case 'bool':
                                properties[property.__name] = property.__value === 'true';
                                break;
                            case 'int':
                                properties[property.__name] = parseInt(property.__value);
                                break;
                            case 'float':
                                properties[property.__name] = parseFloat(property.__value);
                                break;
                            case 'object':
                                properties[property.__name] = parseInt(property.__value);
                                if (parser.options.transformObjectProperties === true) {
                                    parser.pendingObjectsWithObjectProperty.push({
                                        object: properties,
                                        key: property.__name,
                                    });
                                }
                                break;
                            case 'color':
                            case 'string':
                            default:
                                properties[property.__name] = property.__value;
                                break;
                        }
                    });
                    resultObj[key] = properties;
                    break;
                }
                case 'tileset': {
                    const childArr = isChildArray ? child : [child];
                    const tilesets = yield Promise.all(childArr.map((obj) => __awaiter(this, void 0, void 0, function* () {
                        if (obj.__source) {
                            const urlOrPath = parser.resolvePath(obj.__source);
                            const parsedObj = yield parse(urlOrPath);
                            const tileset = parsedObj;
                            tileset.source = obj.__source;
                            tileset.firstGid = parseInt(obj.__firstgid);
                            tileset.tiles.forEach((t) => t.id += tileset.firstGid);
                            return tileset;
                        }
                        else {
                            const tileset = new TileSet_1.TileSet();
                            tileset.name = obj.__name;
                            tileset.tileWidth = parseInt(obj.__tilewidth);
                            tileset.tileHeight = parseInt(obj.__tileheight);
                            if (obj.__firstgid) {
                                tileset.firstGid = parseInt(obj.__firstgid);
                            }
                            tileset.tileCount = parseInt(obj.__tilecount) || obj.tile.length;
                            tileset.columns = parseInt(obj.__columns);
                            tileset.tiles = new Array(tileset.tileCount);
                            for (let i = 0; i < tileset.tiles.length; i++) {
                                const tile = new Tile_1.Tile();
                                tile.tileSet = tileset;
                                tile.id = i;
                                if (obj.__firstgid) {
                                    tile.id += tileset.firstGid - 1;
                                }
                                tileset.tiles[i] = tile;
                            }
                            yield parseXmlObj(obj, parser, tileset);
                            return tileset;
                        }
                    })));
                    tilesets.push();
                    resultObj.tileSets = tilesets;
                    break;
                }
                case 'animation': {
                    const childArr = isChildArray ? child : [child];
                    let frames = [];
                    childArr.forEach((child) => {
                        const xmlFrames = Array.isArray(child.frame) ? child.frame : [child.frame];
                        frames = xmlFrames.map((xmlFrame) => ({
                            tile: resultObj.tileSet.tiles.find(x => x.id === parseInt(xmlFrame.__tileid)),
                            duration: parseFloat(xmlFrame.__duration),
                        }));
                    });
                    resultObj.animations = frames;
                    break;
                }
                case 'image': {
                    const image = new Image_1.Image();
                    image.width = parseInt(child.__width);
                    image.height = parseInt(child.__height);
                    image.source = parser.resolvePath(child.__source);
                    resultObj[key] = image;
                    break;
                }
                case 'tile': {
                    const plainObjTiles = isChildArray ? child : [child];
                    yield Promise.all(plainObjTiles.map((tileObj) => __awaiter(this, void 0, void 0, function* () {
                        const tile = new Tile_1.Tile();
                        tile.tileSet = resultObj;
                        const index = parseInt(tileObj.__id);
                        tile.id = index;
                        tile.type = tileObj.__type;
                        yield parseXmlObj(tileObj, parser, tile);
                        resultObj['tiles'][index] = tile;
                    })));
                    break;
                }
                case 'layer': {
                    const tileLayersObjs = isChildArray ? child : [child];
                    const tileLayers = yield Promise.all(tileLayersObjs.map((layerData) => __awaiter(this, void 0, void 0, function* () {
                        const tileLayer = new TileLayer_1.TileLayer();
                        parseLayer(layerData, tileLayer);
                        tileLayer.width = parseInt(layerData.__width);
                        tileLayer.height = parseInt(layerData.__height);
                        yield parseXmlObj(layerData, parser, tileLayer);
                        return tileLayer;
                    })));
                    resultObj['layers'].push(...tileLayers);
                    break;
                }
                case 'imagelayer': {
                    const layers = isChildArray ? child : [child];
                    const imageLayers = yield Promise.all(layers.map((layer) => __awaiter(this, void 0, void 0, function* () {
                        const imageLayer = new ImageLayer_1.ImageLayer();
                        parseLayer(layer, imageLayer);
                        yield parseXmlObj(layer, parser, imageLayer);
                        return imageLayer;
                    })));
                    resultObj.layers.push(...imageLayers);
                    break;
                }
                case 'objectgroup': {
                    const layers = isChildArray ? child : [child];
                    const objectLayers = yield Promise.all(layers.map((layer) => __awaiter(this, void 0, void 0, function* () {
                        const objectLayer = new ObjectLayer_1.ObjectLayer();
                        objectLayer.visible = layer.__visible !== '0';
                        if (layer.__draworder) {
                            objectLayer.drawOrder = layer.__draworder;
                        }
                        if (layer.__color) {
                            objectLayer.color = layer.__color;
                        }
                        parseLayer(layer, objectLayer);
                        yield parseXmlObj(layer, parser, objectLayer);
                        return objectLayer;
                    })));
                    resultObj.layers.push(...objectLayers);
                    break;
                }
                case 'object': {
                    const objects = isChildArray ? child : [child];
                    resultObj.objects = yield Promise.all(objects.map((obj) => __awaiter(this, void 0, void 0, function* () {
                        let tiledObj = {
                            id: parseInt(obj.__id),
                            name: obj.__name || '',
                            x: parseInt(obj.__x),
                            y: parseInt(obj.__y),
                            type: obj.__type,
                            visible: obj.__visible !== '0',
                            properties: {},
                        };
                        yield parseXmlObj(obj, parser, tiledObj);
                        if (obj.ellipse === '') {
                            tiledObj.objectType = 'ellipse';
                            tiledObj.width = parseInt(obj.__width);
                            tiledObj.height = parseInt(obj.__height);
                        }
                        else if (obj.polyline) {
                            tiledObj.objectType = 'polygon';
                        }
                        else if (obj.text) {
                            tiledObj.objectType = 'text';
                        }
                        else if (Object.prototype.hasOwnProperty.call(obj, 'point')) {
                            tiledObj.objectType = 'point';
                        }
                        else if (obj.__gid) {
                            tiledObj.objectType = 'tile';
                            tiledObj.gid = parseInt(obj.__gid);
                            tiledObj.width = parseInt(obj.__width);
                            tiledObj.height = parseInt(obj.__height);
                            const tile = parser.map.getTileById(tiledObj.gid);
                            // Add inherited properties from tileset
                            tiledObj.properties = Object.assign(tiledObj.properties, tile.properties, tiledObj.properties);
                            tiledObj.tile = tile;
                        }
                        else if (obj.__width && obj.__height) {
                            tiledObj.objectType = 'rectangle';
                            tiledObj.width = parseInt(obj.__width);
                            tiledObj.height = parseInt(obj.__height);
                        }
                        else {
                            throw new Error(`Unidentified object. ${JSON.stringify(obj, null, 2)}`);
                        }
                        switch (obj.__type) {
                            case 'rectangle': {
                                return {
                                    id: parseInt(obj.__id),
                                    type: obj.__type,
                                    x: parseInt(obj.__x),
                                    y: parseInt(obj.__y),
                                };
                            }
                        }
                        return tiledObj;
                    })));
                    break;
                }
                case 'point': {
                    // Get's ignored because point is empty
                    // tmx file looks like this:
                    //   <object id="8" name="namePoint" x="32" y="128">
                    //    <point/>
                    //   </object>
                    break;
                }
                case 'ellipse': {
                    // Get's ignored because ellipse is empty
                    //  <object id="3" name="nameEllipse" x="32" y="32" width="32" height="32">
                    //    <ellipse/>
                    //   </object>
                    break;
                }
                case 'editorsettings': {
                    // Ignore this since it's only relevant to the editor
                    break;
                }
                case 'polyline': {
                    resultObj.polyline = child.__points.split(' ').map(xyStr => {
                        const [xStr, yStr] = xyStr.split(',');
                        return {
                            x: parseInt(xStr),
                            y: parseInt(yStr),
                        };
                    });
                    break;
                }
                case 'text': {
                    if (typeof (child) === 'string') {
                        resultObj.text = { text: child, wordWrap: false };
                    }
                    else {
                        resultObj.text = { text: child['#text'], wordWrap: child.__wrap === '1' };
                    }
                    break;
                }
                case 'data': {
                    const encoding = child.__encoding;
                    const compression = child.__compression;
                    switch (encoding) {
                        case 'base64':
                            resultObj.tiles = yield base64DataParser_1.base64DataParse(parser.map, child['#text'], compression);
                            break;
                        case 'csv':
                            resultObj['tiles'] = csvDataParser_1.csvDataParser(parser.map, child['#text']);
                            break;
                        default:
                            throw new Error(`Unsupported data encoding type: ${encoding}`);
                    }
                    break;
                }
                default: {
                    if (!key.startsWith('__')) {
                        throw new Error(`Unable to parse tag with name ${key}`);
                    }
                }
            }
        }
        return resultObj;
    });
}
//# sourceMappingURL=parse.js.map